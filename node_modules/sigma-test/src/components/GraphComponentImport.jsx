import Graph from "graphology";
import { cropToLargestConnectedComponent } from "graphology-components";
import forceAtlas2 from "graphology-layout-forceatlas2";
import circular from "graphology-layout/circular";
import Papa from "papaparse";
import Sigma from "sigma";
import { useState, useEffect } from "react";

export default function GraphComponent() {
  const [graphLoaded, setGraphLoaded] = useState(false);
  useEffect(() => {
    let renderer = null;

    // 1. Load CSV file:
    Papa.parse("./data.csv", {
        download: true,
        header: true,
        delimiter: ",",
        complete: (results) => {
        const graph = new Graph();

        // 2. Build the bipartite graph:
        results.data.forEach((line) => {
            const institution = line.name;
            const acronym = line.acronym;

            // Create the institution node:
            graph.addNode(institution, {
            nodeType: "institution",
            label: [acronym, institution].filter((s) => !!s).join(" - "),
            });

            // Extract subjects list:
            const subjects = (line.subject_terms
                .match(/(?:\* )[^\n\r]*/g) || [])
                .map((str) => str.replace(/^\* /, ""));
                
            console.log({subjects})
            // For each subject, create the node if it does not exist yet:
            subjects.forEach((subject) => {
            if (!graph.hasNode(subject)) graph.addNode(subject, { nodeType: "subject", label: subject });
            graph.addEdge(institution, subject, { weight: 1 });
            });
        });

        // 3. Only keep the main connected component:
        cropToLargestConnectedComponent(graph);

        // 4. Add colors to the nodes, based on node types:
        const COLORS = { institution: "#FA5A3D", subject: "#5A75DB" };
        graph.forEachNode((node, attributes) =>
            graph.setNodeAttribute(node, "color", COLORS[attributes.nodeType]),
        );

        // 5. Use degrees for node sizes:
        const degrees = graph.nodes().map((node) => graph.degree(node));
        const minDegree = Math.min(...degrees);
        const maxDegree = Math.max(...degrees);
        const minSize = 2, maxSize = 15;
        graph.forEachNode((node) => {
            const degree = graph.degree(node);
            graph.setNodeAttribute(
            node,
            "size",
            minSize + ((degree - minDegree) / (maxDegree - minDegree)) * (maxSize - minSize),
            );
        });

        // 6. Position nodes on a circle, then run Force Atlas 2 for layout:
        circular.assign(graph);
        const settings = forceAtlas2.inferSettings(graph);
        forceAtlas2.assign(graph, { settings, iterations: 600 });

        // 7. Hide the loader from the DOM:
        const loader = document.getElementById("loader");
        if (loader) loader.style.display = "none";

        // 8. Finally, draw the graph using sigma:
        const container = document.getElementById("sigma-container");
        if (container) 
            renderer = new Sigma(graph, container);
        setGraphLoaded(true);
        },
    });

    return () => {
        if (renderer) renderer.kill();
      };
    }, [])}