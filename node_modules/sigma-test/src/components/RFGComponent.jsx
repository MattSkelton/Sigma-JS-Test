import React, { useEffect, useState } from "react";
import { ForceGraph3D } from "react-force-graph";
import Graph from "graphology";
import { cropToLargestConnectedComponent } from "graphology-components";
import forceAtlas2 from "graphology-layout-forceatlas2";
import circular from "graphology-layout/circular";
import Papa from "papaparse";

export default function GraphComponent() {
  const [graphData, setGraphData] = useState({ nodes: [], links: [] });

  useEffect(() => {
    Papa.parse("/data.csv", {
      download: true,
      header: true,
      delimiter: ",",
      skipEmptyLines: true,
      complete: (results) => {
        const graph = new Graph();

        results.data.forEach((line) => {
          const institution = line.name;
          const acronym = line.acronym;

          if (!institution) return; // Skip empty rows

          // Add institution node
          graph.addNode(institution, {
            nodeType: "institution",
            label: [acronym, institution].filter((s) => !!s).join(" - "),
            color: "#FA5A3D",
          });

          // Extract subjects
          const subjects = (line.subject_terms
            .match(/(?:\* )[^\n\r]*/g) || [])
            .map((str) => str.replace(/^\* /, ""));
          console.log({subjects})
          // Add subject nodes and edges
          subjects.forEach((subject) => {
            if (!graph.hasNode(subject)) {
              graph.addNode(subject, { nodeType: "subject", label: subject, color: "#5A75DB" });
            }
            graph.addEdge(institution, subject, { weight: 1 });
          });
        });

        // Keep only the largest connected component
        cropToLargestConnectedComponent(graph);

        // Apply circular layout
        circular.assign(graph);

        // Run force-atlas2 for better layout
        const settings = forceAtlas2.inferSettings(graph);
        forceAtlas2.assign(graph, { settings, iterations: 600 });

        // Convert graphology format to react-force-graph format
        const nodes = graph.nodes().map((node) => ({
          id: node,
          label: graph.getNodeAttribute(node, "label"),
          color: graph.getNodeAttribute(node, "color"),
        }));

        const links = graph.edges().map((edge) => ({
          source: graph.source(edge),
          target: graph.target(edge),
        }));

        setGraphData({ nodes, links });
      },
    });
  }, []);

  return (
    <div style={{ width: "100vw", height: "100vh" }}>
      <ForceGraph3D
        graphData={graphData}
        nodeAutoColorBy="color"
        linkDirectionalArrowLength={3.5}
        linkDirectionalArrowRelPos={1}
        nodeCanvasObject={(node, ctx, globalScale) => {
          const label = node.label;
          const fontSize = 12 / globalScale;
          ctx.font = `${fontSize}px Sans-Serif`;
          ctx.fillStyle = "black";
          ctx.textAlign = "center";
          ctx.fillText(label, node.x, node.y - 8);
        }}
      />
    </div>
  );
}
